/// <reference types="node" />
declare type RawJSON = null | string | number | boolean | {
    [key: string]: RawJSON;
} | RawJSONArray;
interface RawJSONArray extends Array<RawJSON> {
}
export default abstract class ISerializer<Base = any, Input extends Base | any = Base, JSON extends RawJSON = any> {
    abstract toJSON(value: Input): JSON;
    abstract fromJSON(value: JSON): Base;
    abstract toBuffer(value: Input): Buffer;
    abstract readFromBuffer(buffer: Buffer, offset?: number): {
        res: Base;
        newOffset: number;
    };
    stringify(value: Input): string;
    parse(value: string | Buffer): Base;
    fromBuffer(buffer: Buffer): Base;
}
export declare type BaseOf<Serializer> = Serializer extends ISerializer<infer T, any, any> ? T : never;
export declare type InputOf<Serializer> = Serializer extends ISerializer<any, infer T, any> ? T : never;
export declare type JSONOf<Serializer> = Serializer extends ISerializer<any, any, infer T> ? T : never;
export {};
