"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ISerializer_1 = __importDefault(require("./ISerializer"));
const varuint_1 = __importDefault(require("./varuint"));
class VectorSerializer extends ISerializer_1.default {
    constructor(serializer) {
        super();
        this.serializer = serializer;
    }
    toJSON(value) { return value.map((element) => this.serializer.toJSON(element)); }
    fromJSON(value) { return value.map((element) => this.serializer.fromJSON(element)); }
    toBuffer(value) {
        return Buffer.concat([
            varuint_1.default.toBuffer(value.length),
            ...value.map((element) => this.serializer.toBuffer(element)),
        ]);
    }
    readFromBuffer(buffer, offset = 0) {
        const { res: length, newOffset: from } = varuint_1.default.readFromBuffer(buffer, offset);
        let it = from;
        if (length.gt(Number.MAX_SAFE_INTEGER))
            throw new Error('unprocessable vector length');
        const res = new Array(length.toNumber()).fill(null).map(() => {
            const { res: element, newOffset } = this.serializer.readFromBuffer(buffer, it);
            it = newOffset;
            return element;
        });
        return { res, newOffset: it };
    }
}
exports.VectorSerializer = VectorSerializer;
function vector(serializer) {
    return new VectorSerializer(serializer);
}
exports.default = vector;
