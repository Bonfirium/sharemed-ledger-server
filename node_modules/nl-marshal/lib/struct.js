"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ISerializer_1 = __importDefault(require("./ISerializer"));
class StructSerializer extends ISerializer_1.default {
    constructor(serializers) {
        super();
        this.serializers = Object.keys(serializers).reduce((acc, key) => {
            acc[key] = serializers[key];
            return acc;
        }, {});
    }
    get keys() { return Object.keys(this.serializers); }
    toJSON(value) {
        return this.keys.reduce((acc, key) => {
            acc[key] = this.serializers[key].toJSON(value[key]);
            return acc;
        }, {});
    }
    fromJSON(value) {
        return this.keys.reduce((acc, key) => {
            acc[key] = this.serializers[key].fromJSON(value[key]);
            return acc;
        }, {});
    }
    toBuffer(value) {
        return Buffer.concat(this.keys.map((key) => this.serializers[key].toBuffer(value[key])));
    }
    readFromBuffer(buffer, offset = 0) {
        const result = {};
        for (const key of this.keys) {
            const { res: value, newOffset: nextOffset } = this.serializers[key].readFromBuffer(buffer, offset);
            result[key] = value;
            offset = nextOffset;
        }
        return { res: result, newOffset: offset };
    }
}
exports.StructSerializer = StructSerializer;
function struct(serializers) { return new StructSerializer(serializers); }
exports.default = struct;
function extended(extended, serializers) { return struct(Object.assign(Object.assign({}, extended.serializers), serializers)); }
exports.extended = extended;
