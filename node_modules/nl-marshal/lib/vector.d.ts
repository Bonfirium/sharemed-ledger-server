/// <reference types="node" />
import ISerializer, { BaseOf, InputOf, JSONOf } from "./ISerializer";
declare type Base<T extends ISerializer> = BaseOf<T>[];
declare type Input<T extends ISerializer> = InputOf<T>[];
declare type JSON<T extends ISerializer> = JSONOf<T>[];
export declare class VectorSerializer<T extends ISerializer> extends ISerializer<Base<T>, Input<T>, JSON<T>> {
    readonly serializer: T;
    constructor(serializer: T);
    toJSON(value: Input<T>): JSON<T>;
    fromJSON(value: JSON<T>): Base<T>;
    toBuffer(value: Input<T>): Buffer;
    readFromBuffer(buffer: Buffer, offset?: number): {
        res: Base<T>;
        newOffset: number;
    };
}
export default function vector<T extends ISerializer>(serializer: T): VectorSerializer<T>;
export {};
