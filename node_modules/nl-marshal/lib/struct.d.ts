/// <reference types="node" />
import ISerializer, { InputOf, BaseOf, JSONOf } from "./ISerializer";
declare type SerializersMap = {
    [key: string]: ISerializer;
};
declare type Base<T extends SerializersMap> = {
    [key in keyof T]: BaseOf<T[key]>;
};
declare type Input<T extends SerializersMap> = {
    [key in keyof T]: InputOf<T[key]>;
};
declare type JSON<T extends SerializersMap> = {
    [key in keyof T]: JSONOf<T[key]>;
};
export declare class StructSerializer<T extends SerializersMap> extends ISerializer<Base<T>, Input<T>, JSON<T>> {
    readonly serializers: Readonly<T>;
    readonly keys: (keyof T)[];
    constructor(serializers: T);
    toJSON(value: Input<T>): JSON<T>;
    fromJSON(value: JSON<T>): Base<T>;
    toBuffer(value: Input<T>): Buffer;
    readFromBuffer(buffer: Buffer, offset?: number): {
        res: Base<T>;
        newOffset: number;
    };
}
export default function struct<T extends SerializersMap>(serializers: T): StructSerializer<T>;
export declare function extended<Extended extends SerializersMap, T extends SerializersMap>(extended: StructSerializer<Extended>, serializers: T): StructSerializer<Extended & T>;
export {};
