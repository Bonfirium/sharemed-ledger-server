/// <reference types="node" />
import ISerializer from "./ISerializer";
export declare enum Encoding {
    UTF_8 = "utf-8",
    BASE_58 = "base58"
}
declare type Input = Buffer | string;
export declare class BytesSerializer extends ISerializer<Buffer, Input, string> {
    readonly encoding: Encoding;
    readonly length?: number;
    constructor(opts?: {
        encoding?: Encoding;
        length?: number;
    });
    toJSON(value: Input): string;
    fromJSON(value: string): Buffer;
    toBuffer(value: Input): Buffer;
    readFromBuffer(buffer: Buffer, offset?: number): {
        res: Buffer;
        newOffset: number;
    };
    decode(str: string): Buffer;
    encode(buffer: Buffer): string;
}
export default function bytes(opts?: {
    encoding?: Encoding;
    length?: number;
}): BytesSerializer;
export {};
